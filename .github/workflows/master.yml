name: Upload Release Asset

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - master

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Compile schemas
        run: |
          # check if glib-compile-schemas exists
          if [ -x /usr/bin/glib-compile-schemas ]; then
              # check if schemas directory exists
              if [ -d ./schemas/ ]; then
                  echo "HERE!!"
                  /usr/bin/glib-compile-schemas --strict schemas/
              fi
          fi

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: zip vitals.zip -r * -x "README.md" -x "locale/*.po" -x "locale/vitals.pot" -x "zip.sh" -x "schemas/org.gnome.shell.extensions.vitals.gschema.xml"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./vitals.zip
          asset_name: vitals.zip
          asset_content_type: application/zip
