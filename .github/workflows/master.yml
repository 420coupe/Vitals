name: Upload Release Asset

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - master

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Compile schemas
        run: /usr/bin/glib-compile-schemas --strict schemas/

      - name: Install msgfmt command
        run: sudo apt-get install gettext

      - name: Compile message catalogs
        run: |
          for i in locale/*/
              do /usr/bin/msgfmt $i/LC_MESSAGES/vitals.po -o $i/LC_MESSAGES/vitals.mo
          done

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: zip vitals.zip -r * -x "README.md" -x "locale/*.po" -x "locale/vitals.pot" -x "zip.sh" -x "schemas/org.gnome.shell.extensions.vitals.gschema.xml"

      - name: Install semver command
        run: sudo npm install -g semver

      - name: Get next available tag
        run: .github/workflows/get_next_tag.sh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./vitals.zip
          asset_name: vitals.zip
          asset_content_type: application/zip

      - name: Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # get current commit hash
          commit=$(git rev-parse HEAD)

          # push new tag ref to github

          echo "Pushing tag $TAG to repo $GITHUB_REPOSITORY"

          git_refs_response=$(
          curl -s -X POST https://api.github.com/repos/corecoding/Vitals/git/refs \
          -H "Authorization: token $GITHUB_TOKEN" \
          -d @- << EOF
          {
            "ref": "refs/tags/$TAG",
            "sha": "$commit"
          }
          EOF
          )

          git_ref_posted=$( echo "${git_refs_response}" | jq .ref | tr -d '"' )

          echo "::debug::${git_refs_response}"
          if [ "${git_ref_posted}" != "refs/tags/${TAG}" ]; then
            echo "::error::Tag was not created properly."
            exit 1
          fi
